select(time = TIME_PERIOD, industry = values)
# Spojení do jedné tabulky (už 1:1 join)
data_cz <- hicp_cz %>%
left_join(unemp_cz, by = "time") %>%
left_join(industry_cz, by = "time")
# Průmyslová produkce (zpracovatelský průmysl, index 2015=100, NSA)
industry_cz <- get_eurostat("sts_inpr_m", time_format = "date") %>%
filter(geo == "CZ", s_adj == "NSA", nace_r2 == "C", unit == "I15") %>%
select(time = TIME_PERIOD, industry = values)
# Spojení do jedné tabulky (už 1:1 join)
data_cz <- hicp_cz %>%
left_join(unemp_cz, by = "time") %>%
left_join(industry_cz, by = "time")
# industry data jsou až od roku 2000, takže ořízneme i ostatní
data_cz <- data_cz %>%
filter(time >= as.Date("2000-01-01"))
head(data_cz)
# HICP
p1 <- ggplot(data_cz, aes(x = time, y = hicp)) +
geom_line(color = "blue") +
labs(title = "HICP - ČR", x = "Datum", y = "Index") +
theme_minimal()
# Nezaměstnanost
p2 <- ggplot(data_cz, aes(x = time, y = unemp)) +
geom_line(color = "red") +
labs(title = "Nezaměstnanost - ČR", x = "Datum", y = "%") +
theme_minimal()
View(p1)
# Průmyslová produkce
p3 <- ggplot(data_cz, aes(x = time, y = industry)) +
geom_line(color = "green") +
labs(title = "Průmyslová produkce - ČR", x = "Datum", y = "Index") +
theme_minimal()
ggarrange(p1, p2, p3, ncol = 1, nrow = 3)
# Na grafu průmyslové produkce lze dobře vidět její sezónnost (pravidelné roční výkyvy).
industry_short <- industry_cz %>%
filter(time >= as.Date("2010-01-01") & time < as.Date("2013-01-01"))
ggplot(industry_short, aes(x = time, y = industry)) +
geom_line(color = "green", size = 1) +
labs(title = "Průmyslová produkce v ČR v roce 2010-2012",
x = "Měsíc",
y = "Index") +
theme_minimal()
hicp_short <- hicp_cz %>%
filter(time >= as.Date("2005-01-01") & time < as.Date("2008-01-01"))
ggplot(hicp_short, aes(x = time, y = hicp)) +
geom_line(color = "blue", size = 1) +
labs(title = "HICP v ČR v letech 2005-2008",
x = "Měsíc",
y = "Index") +
theme_minimal()
unemp_short <- unemp_cz %>%
filter(time >= as.Date("2007-01-01") & time < as.Date("2010-01-01"))
ggplot(unemp_short, aes(x = time, y = unemp)) +
geom_line(color = "red", size = 1) +
labs(title = "Nezaměstnanost v ČR v roce 2007-2010",
x = "Měsíc",
y = "%") +
theme_minimal()
# převedem na ts
unemp_ts <- ts(unemp_cz$unemp, start = c(2000, 1), frequency = 12)
industry_ts <- ts(industry_cz$industry, start = c(2000, 1), frequency = 12)
hicp_ts <- ts(hicp_cz$hicp, start = c(2000, 1), frequency = 12)
plot(industry_ts)
# Dekompozice
industry_decomp <- decompose(industry_ts)
plot(industry_decomp)
# klouzave prumery
industry.rm3 <- rollmean(industry_ts, 3)
industry.rm5 <- rollmean(industry_ts, 5)
industry.rm7 <- rollmean(industry_ts, 7)
industry.rm9 <- rollmean(industry_ts, 9)
industry.rm11 <- rollmean(industry_ts, 11)
plot(industry_ts)
lines(industry.rm3, col = 2)
lines(industry.rm5, col = 3)
lines(industry.rm7, col = 4)
lines(industry.rm9, col = 5)
lines(industry.rm11, col = 6)
legend(2016, 60, legend=c("puvodni rada", "KP delky 3", "KP delky 5", "KP delky 7", "KP delky 9", "KP delky 11"),
lty=1, col=1:6, cex=0.8)
# ts -> data frame
industry_df <- data.frame(
time = time(industry_ts),
industry = as.numeric(industry_ts)
)
# klouzavé průměry
industry_df <- industry_df %>%
mutate(
rm3  = rollmean(industry, k = 3, fill = NA, align = "center"),
rm5  = rollmean(industry, k = 5, fill = NA, align = "center"),
rm7  = rollmean(industry, k = 7, fill = NA, align = "center"),
rm9  = rollmean(industry, k = 9, fill = NA, align = "center"),
rm11 = rollmean(industry, k = 11, fill = NA, align = "center")
)
p_rm <- ggplot(industry_df, aes(x = time)) +
geom_line(aes(y = industry), color = "green") +
geom_line(aes(y = rm3), color = "blue") +
geom_line(aes(y = rm5), color = "red") +
geom_line(aes(y = rm7), color = "purple") +
geom_line(aes(y = rm9), color = "orange") +
geom_line(aes(y = rm11), color = "brown") +
labs(title = "Průmyslová produkce v ČR s klouzavými průměry",
x = "Rok",
y = "Index") +
theme_minimal()
ggplotly(p_rm)
hw_model <- HoltWinters(industry_ts)
# převod na časové řady
hicp.ts <- ts(data_cz$hicp, start = c(2000,1), frequency = 12)
unemp.ts <- ts(data_cz$unemp, start = c(2000,1), frequency = 12)
industry.ts <- ts(data_cz$industry, start = c(2000,1), frequency = 12)
# 4. hledani optimalniho modelu sarima
plot(industry.ts)
industry.ts
par(mfrow = c(2,1))
acf(industry.ts, na.action = na.pass); pacf(industry.ts, na.action = na.pass)
par(mfrow = c(1,1))
d1 <- diff(industry.ts, lag = 12)
# rada prvnich sezonnich diferenci
plot(d1)
# rada je na prvni pohled bez trendu i sezonnosti
par(mfrow = c(2,1))
acf(d1, na.action = na.pass); pacf(d1, na.action = na.pass)
par(mfrow = c(1,1))
(fit.auto <- auto.arima(industry.ts))
coeftest(fit.auto) # všschny čelny jsou významné
AIC(fit.auto)
BIC(fit.auto)
# převod na časové řady
hicp.ts <- ts(data_cz$hicp, start = c(2000,1), frequency = 12)
unemp.ts <- ts(data_cz$unemp, start = c(2000,1), frequency = 12)
industry.ts <- ts(data_cz$industry, start = c(2000,1), frequency = 12)
# 4. hledani optimalniho modelu sarima
plot(industry.ts)
industry.ts
par(mfrow = c(2,1))
acf(industry.ts, na.action = na.pass); pacf(industry.ts, na.action = na.pass)
par(mfrow = c(1,1))
d1 <- diff(industry.ts, lag = 12)
# rada prvnich sezonnich diferenci
plot(d1)
# rada je na prvni pohled bez trendu i sezonnosti
par(mfrow = c(2,1))
acf(d1, na.action = na.pass); pacf(d1, na.action = na.pass)
par(mfrow = c(1,1))
(fit.auto <- auto.arima(industry.ts))
library(TTR)
hicp <- get_eurostat("prc_hicp_midx")
tourism <- get_eurostat("tour_occ_nim")
airport <- get_eurostat("avia_paoc")
# tourism
tourism.cz <- tourism %>%
filter(geo == "CZ",
c_resid == "TOTAL",
nace_r2 == "I551-I553",
unit == "NR") %>%
arrange(TIME_PERIOD)
tourism.ts <- ts(tourism.cz$values, start = c(2015,1), end=c(2025,1), frequency = 12)
plot(tourism.ts, main="Přenocování v ČR (01/2015 – 01/2025)")
tourism.diff <- diff(log(tourism.ts), lag=12)
# airport - počety přepravených pasažérů (pro ČR)
airport.cz <- airport %>%
filter(geo == "CZ",
freq == "M",
schedule == "TOT",
tra_meas == "PAS_CRD",
tra_cov == "TOTAL") %>%
arrange(TIME_PERIOD)
airport.ts <- ts(airport.cz$values, start=c(2015,1), end=c(2025,1), frequency=12)
plot(airport.ts)
airport.diff <- diff(log(airport.ts), lag=12)
# Vývoj cen hotelů a restaurací (pro ČR)
prices.HR <- hicp %>%
filter(geo == "CZ",
coicop == "CP11",
unit == "I05") %>%
arrange(TIME_PERIOD)
prices.HR.ts <- ts(prices.HR$values, start=c(2015,1), end=c(2025,1), frequency = 12)
plot(prices.HR.ts, main="Vývoj cen (HICP) hotelů a restaurací (01/2015 – 01/2025), ČR")
prices.HR.diff <- diff(log(prices.HR.ts), lag=12)
# Vývoj cen dopravních služeb pro ČR (transport services)
transport.services <- hicp %>%
filter(geo == "CZ",
coicop == "CP073",
unit == "I05") %>%
arrange(TIME_PERIOD)
transport.services.ts <- ts(transport.services$values, start=c(2015,1), end=c(2025,1), frequency = 12)
plot(transport.services.ts, main="Vývoj cen (HICP) v dopravních službách (01/2015 – 01/2025), ČR")
transport.services.diff <- diff(log(transport.services.ts), lag=12)
# kros-korelace
par(mfrow=c(1, 3))
ccf(tourism.diff, prices.HR.diff, lag.max=24, na.action = na.pass)
ccf(tourism.diff, transport.services.diff, lag.max=24, na.action = na.pass)
ccf(tourism.diff, airport.diff, lag.max=24, na.action = na.pass)
par(mfrow=c(1, 1))
# významný lag 0 a +1
airport.lag0 <- airport.ts
airport.lag1 <- stats::lag(airport.ts, -1)
xreg_airport <- cbind(airport.lag0, airport.lag1)
# NA z lagování
common <- complete.cases(cbind(tourism.ts, xreg_airport))
tourism.clean <- tourism.ts[common]
xreg.clean <- xreg_airport[common, ]
fit_airport <- auto.arima(tourism.clean, xreg = xreg.clean)
summary(fit_airport)
### Kontrola předpokladů
checkresiduals(fit_airport)
# airport lags
airport.lags <- cbind(
stats::lag(airport.ts, k=0),
stats::lag(airport.ts, k=-1, na.pad=TRUE),
stats::lag(airport.ts, k=-2, na.pad=TRUE)
)
library(eurostat)
library(forecast)
library(dplyr)
library(TTR)
library(zoo)
toc <- get_eurostat_toc()
hicp <- get_eurostat("prc_hicp_midx")
tourism <- get_eurostat("tour_occ_nim")
airport <- get_eurostat("avia_paoc")
# tourism
tourism.cz <- tourism %>%
filter(geo == "CZ",
c_resid == "TOTAL",
nace_r2 == "I551-I553",
unit == "NR") %>%
arrange(TIME_PERIOD)
tourism.ts <- ts(tourism.cz$values, start = c(2015,1), end=c(2025,1), frequency = 12)
plot(tourism.ts, main="Přenocování v ČR (01/2015 – 01/2025)")
tourism.diff <- diff(log(tourism.ts), lag=12)
# airport - počety přepravených pasažérů (pro ČR)
airport.cz <- airport %>%
filter(geo == "CZ",
freq == "M",
schedule == "TOT",
tra_meas == "PAS_CRD",
tra_cov == "TOTAL") %>%
arrange(TIME_PERIOD)
airport.ts <- ts(airport.cz$values, start=c(2015,1), end=c(2025,1), frequency=12)
plot(airport.ts)
airport.diff <- diff(log(airport.ts), lag=12)
# Vývoj cen hotelů a restaurací (pro ČR)
prices.HR <- hicp %>%
filter(geo == "CZ",
coicop == "CP11",
unit == "I05") %>%
arrange(TIME_PERIOD)
prices.HR.ts <- ts(prices.HR$values, start=c(2015,1), end=c(2025,1), frequency = 12)
plot(prices.HR.ts, main="Vývoj cen (HICP) hotelů a restaurací (01/2015 – 01/2025), ČR")
prices.HR.diff <- diff(log(prices.HR.ts), lag=12)
# Vývoj cen dopravních služeb pro ČR (transport services)
transport.services <- hicp %>%
filter(geo == "CZ",
coicop == "CP073",
unit == "I05") %>%
arrange(TIME_PERIOD)
transport.services.ts <- ts(transport.services$values, start=c(2015,1), end=c(2025,1), frequency = 12)
plot(transport.services.ts, main="Vývoj cen (HICP) v dopravních službách (01/2015 – 01/2025), ČR")
transport.services.diff <- diff(log(transport.services.ts), lag=12)
# kros-korelace
par(mfrow=c(1, 3))
ccf(tourism.ts, prices.HR.ts, lag.max=24, na.action = na.pass)
ccf(tourism.ts, transport.services.ts, lag.max=24, na.action = na.pass)
ccf(tourism.ts, airport.ts, lag.max=24, na.action = na.pass)
par(mfrow=c(1, 1))
ccf(tourism.ts, airport.ts, lag.max=24, na.action = na.pass)
plot(tourism.ts)
lines(rm48, col="purple")
#klouzave prumery
rm6 <- rollmean(tourism.ts, k=6)
rm12 <- rollmean(tourism.ts, k=12)
rm24 <- rollmean(tourism.ts, k=24)
rm48 <- rollmean(tourism.ts, k=48)
lines(rm24, col="green")
lines(rm48, col="purple")
lines(rm6, col="red")
plot(tourism.ts)
lines(rm12, col="blue")
lines(rm24, col="green")
lines(rm48, col="purple")
plot(tourism.ts)
lines(rm12, col="blue")
lines(rm24, col="green")
lines(rm48, col="purple")
plot(tourism.ts)
lines(rm12, col="blue")
lines(rm24, col="green")
lines(rm48, col="purple")
plot(tourism.ts)
lines(rm48, col="purple")
hw.model <- HoltWinters(tourism.ts, seasonal="multiplicative")
hw.model
plot(tourism.ts, main="Model Holt-Winters", ylab="Values", lwd=2)
lines(hw.model$fitted[,1], col="red", lwd=2)
legend("topleft", legend=c("Fit", "Data"), col=c("red", "black"), lty=1)
par(mfrow=c(2,1))
acf(tourism.ts, main="ACF")
pacf(tourism.ts, main="PACF")
par(mfrow=c(1,1))
par(mfrow=c(1,2))
acf(tourism.ts, main="ACF")
pacf(tourism.ts, main="PACF")
cz.adj <- tourism.ts / decompose(tourism.ts, type="multiplicative")$seasonal
foreign.adj <- foreign.ts / decompose(foreign.ts, type="multiplicative")$seasonal
plot(cz.adj, main="Celková přenocování v ČR (sezónně očištěno)", ylab="Počet přenocování")
plot(foreign.ts)
foreign <- subset(tourism, geo == "CZ" & unit == "NR" & nace_r2 == "I551-I553" & c_resid == "FOR")
foreign.ts <- ts(foreign$values, start=c(2015,1), end=c(2025,1), frequency=12)
plot(foreign.ts)
foreign <- subset(tourism, geo == "CZ" &
unit == "NR" &
nace_r2 == "I551-I553" &
_resid == "FOR")
foreign <- subset(tourism, geo == "CZ" &
unit == "NR" &
nace_r2 == "I551-I553" &
resid == "FOR")
foreign.ts <- ts(foreign$values, start=c(2015,1), end=c(2025,1), frequency=12)
foreign <- subset(tourism, geo == "CZ" &
unit == "NR" &
nace_r2 == "I551-I553" &
c_resid == "FOR")
foreign.ts <- ts(foreign$values, start=c(2015,1), end=c(2025,1), frequency=12)
plot(foreign.ts)
cz.adj <- tourism.ts / decompose(tourism.ts, type="multiplicative")$seasonal
foreign.adj <- foreign.ts / decompose(foreign.ts, type="multiplicative")$seasonal
plot(cz.adj, main="Celková přenocování v ČR (sezónně očištěno)", ylab="Počet přenocování")
# SARIMA s exogenní proměnnou
sarimax_model <- auto.arima(tourism.ts,
xreg = foreign.adj,
seasonal = TRUE,
stepwise = FALSE,
approximation = FALSE)
summary(sarimax_model)
checkresiduals(sarimax_model) # ljungbox test kontroluje autokorelaci / pokud je hodnota < 0,05 byla by pritomna autokorelace
coeftest(sarima.model)
library(eurostat)
library(TTR)
library(zoo)
library(forecast)
library(dplyr)
library(ggplot2)
library(reshape2)
library(knitr)
coeftest(sarima.model)
library(lmtest)
library(sandwich)
coeftest(sarima.model)
sarima.model <- auto.arima(tourism.ts, seasonal=TRUE)
summary(sarima.model)
coeftest(sarima.model)
hw.model <- HoltWinters(tourism.ts, seasonal="multiplicative")
hw.model
plot(tourism.ts, main="Model Holt-Winters", ylab="Values", lwd=2)
lines(hw.model$fitted[,1], col="red", lwd=2)
legend("topleft", legend=c("Fit", "Data"), col=c("red", "black"), lty=1)
par(mfrow=c(1,2))
acf(tourism.ts, main="ACF")
pacf(tourism.ts, main="PACF")
par(mfrow=c(1,1))
sarima.model <- auto.arima(tourism.ts, seasonal=TRUE)
summary(sarima.model)
coeftest(sarima.model)
checkresiduals(sarima.model)
manual.model <- arima(tourism.ts, order=c(0,1,1), seasonal=list(order=c(0,1,1), period=12))
summary(manual.model)
checkresiduals(manual.model)
plot(tourism.ts, main="SARIMA model", ylab="Values", lwd=2)
lines(fitted(sarima.model), col="red", lwd=2)
lines(fitted(manual.model), col="blue", lwd=2)
legend("topleft", legend=c("SARIMA", "Manual", "Data"), col=c("red", "blue", "black"), lty=1)
dat0 <- get_eurostat("tour_occ_nim")
foreign <- subset(tourism, geo == "CZ" &
unit == "NR" &
nace_r2 == "I551-I553" &
c_resid == "FOR")
foreign.ts <- ts(foreign$values, start=c(2015,1), end=c(2025,1), frequency=12)
plot(foreign.ts)
cz.adj <- tourism.ts / decompose(tourism.ts, type="multiplicative")$seasonal
foreign.adj <- foreign.ts / decompose(foreign.ts, type="multiplicative")$seasonal
plot(cz.adj, main="Celková přenocování v ČR (sezónně očištěno)", ylab="Počet přenocování")
ccf_result <- ccf(foreign.adj, cz.adj, lag.max = 24, main="Kroskorelace zahraničních turistů a celkových přenocování")
dynamic_model <- dynlm(cz.adj ~ L(foreign.adj, 0:3))
library(dynlm)
dynamic_model <- dynlm(cz.adj ~ L(foreign.adj, 0:3))
summary(dynamic_model)
AIC(dynamic_model)
plot(tourism.ts)
lines(rm12, col="blue")
ccf_result <- ccf(foreign.adj, cz.adj, lag.max = 24, main="Kroskorelace zahraničních turistů a celkových přenocování")
## normalita
sarima.model.residuals <- residuals(sarima.model)
shapiro.test(sarima.model.residuals)
manual.model.residuals <- residuals(manual.model)
shapiro.test(manual.model.residuals)
sarimax_model.residuals <- residuals(sarimax_model)
shapiro.test(sarimax_model)
hw.model.residuals <- residuals(hw.model)
shapiro.test(hw.model)
checkresiduals(manual.model)
checkresiduals(sarima.model)
checkresiduals(sarimax_model) # ljungbox test kontroluje autokorelaci / pokud je hodnota < 0,05 byla by pritomna autokorelace
# p-hodnota < alfa
checkresiduals(hw.model)
checkresiduals(sarima.model)
# p-hodnota < alfa
checkresiduals(hw.model)
checkresiduals(sarima.model)
checkresiduals(manual.model)
checkresiduals(sarimax_model)
checkresiduals(dynamic_model)
bptest(hw.model)
bptest(sarima.model)
checkresiduals(hw.model)
checkresiduals(dynamic_model)
checkresiduals(sarima.model)
checkresiduals(manual.model)
sarima.model.residuals <- residuals(sarima.model)
shapiro.test(sarima.model.residuals)
manual.model.residuals <- residuals(manual.model)
shapiro.test(manual.model.residuals)
bptest(sarima.model)
bptest(sarima.model.residuals)
bptest(sarima.model)
library(FinTS)
install.packages("FinTS")
library(FinTS)
ArchTest(residuals(sarima.model))
bptest(sarima.model, lag=12)
ArchTest(residuals(sarima.model), lag=12)
ArchTest(residuals(hw.model), lag=12) # nesplneno
ArchTest(residuals(manual.model), lag=12) # splneno
ArchTest(residuals(dynamic_model), lag=12) # splneno
ArchTest(residuals(sarimax_model), lag=12) # splneno
shapiro.test(residuals(sarima.model))
shapiro.test(residuals(hw.model))
shapiro.test(residuals(manual.model)) # p-hodnota < alfa
shapiro.test(residuals(sarima.model)) # p-hodnota < alfa
shapiro.test(residuals(hw.model))
shapiro.test(residuals(manual.model)) # p-hodnota < alfa -> nesplneno
shapiro.test(residuals(sarima.model)) # p-hodnota < alfa -> nesplneno
shapiro.test(residuals(dynamic_model)) # p-hodnota < alfa
shapiro.test(residuals(sarimax_model)) # p-hodnota < alfa
shapiro.test(residuals(dynamic_model)) #splneno
checkresiduals(hw.model)
checkresiduals(sarima.model)
checkresiduals(manual.model)
checkresiduals(dynamic_model)
checkresiduals(sarimax_model)
ArchTest(residuals(hw.model), lag=12) # splneno
checkresiduals(hw.model) # splneno
# Výpočet přesnosti modelů
# ----------------------
accuracy_df <- rbind(
HoltWinters = accuracy(pred_hw)[,c("RMSE","MAPE")],
SARIMA = accuracy(pred_sarima)[,c("RMSE","MAPE")],
ManualARIMA = accuracy(pred_manual)[,c("RMSE","MAPE")],
SARIMAX = accuracy(pred_sarimax)[,c("RMSE","MAPE")]
)
# - - - PREDIKCE - - -
pred_hw <- forecast(hw.model, h=10)
plot(pred_hw, main="Predikce 10 budoucích měsíců – Holt-Winters", ylab="Počet přenocování", xlab="Rok")
pred_sarima <- forecast(sarima.model, h=10)
plot(pred_sarima, main="Predikce 10 budoucích měsíců – SARIMA", ylab="Počet přenocování", xlab="Rok")
pred_manual <- forecast(manual.model, h=10)
plot(pred_manual, main="Predikce 10 budoucích měsíců – Manuální ARIMA", ylab="Počet přenocování", xlab="Rok")
# Predikce zahraničních turistů
fit_foreign <- auto.arima(foreign.ts)
foreign_future <- forecast(fit_foreign, h=10)$mean
# Predikce SARIMAX
pred_sarimax <- forecast(sarimax_model, xreg = foreign_future, h = 10)
plot(pred_sarimax, main="Predikce 10 budoucích měsíců – SARIMAX", ylab="Počet přenocování", xlab="Rok")
# Výpočet přesnosti modelů
# ----------------------
accuracy_df <- rbind(
HoltWinters = accuracy(pred_hw)[,c("RMSE","MAPE")],
SARIMA = accuracy(pred_sarima)[,c("RMSE","MAPE")],
ManualARIMA = accuracy(pred_manual)[,c("RMSE","MAPE")],
SARIMAX = accuracy(pred_sarimax)[,c("RMSE","MAPE")]
)
print(accuracy_df)
AIC(hw.model)
AIC(manual.model)
AIC(manual.model)
AIC(dynamic_model)
AIC(sarimax_model)
AIC(hw.model)
AIC(hw.model)
AIC(sarima.model)
AIC(manual.model)
AIC(sarimax_model)
AIC(dynamic_model)
AIC(hw.model)
print(accuracy_df)
AIC(hw.model)
AIC(sarima.model)
AIC(manual.model)
AIC(sarimax_model)
AIC(dynamic_model)
par(mfrow=c(1,2))
acf(tourism.ts, main="ACF")
pacf(tourism.ts, main="PACF")
aic_df <- rbind(
Dynamicky_model = AIC(dynamic_model),
SARIMA_auto = AIC(sarima.model),
SARIMA_manual = AIC(manual.model),
SARIMAX = AIC(sarimax_model)
)
print(aic_df)
